{
	"info": {
		"_postman_id": "a7b77970-2768-4f27-a4fc-12c0e2696820",
		"name": "VideoStoreAPI Wave 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List Customers",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Check data format",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Data is an array\"] = Array.isArray(jsonData);",
							"tests[\"Many customers were sent\"] = jsonData.length > 0;",
							"",
							"// Save info on the first customer",
							"postman.setEnvironmentVariable(\"customer_id\", jsonData[0].id);",
							"postman.setEnvironmentVariable(\"customer_mcoc\", jsonData[0].movies_checked_out_count);",
							"",
							"// Check required fields",
							"var hasId = true;",
							"var hasName = true;",
							"var hasRegisteredAt = true;",
							"var hasPostalCode = true;",
							"var hasPhone = true;",
							"var hasMoviesCheckedOutCount = true;",
							"",
							"jsonData.forEach(function(customer) {",
							"  hasId = hasId && \"id\" in customer;",
							"  hasName = hasName && \"name\" in customer;",
							"  hasRegisteredAt = hasRegisteredAt && \"registered_at\" in customer;",
							"  hasPostalCode = hasPostalCode && \"postal_code\" in customer;",
							"  hasPhone = hasPhone && \"phone\" in customer;",
							"  hasMoviesCheckedOutCount = hasMoviesCheckedOutCount && \"movies_checked_out_count\" in customer;",
							"});",
							"",
							"tests[\"All customers have id\"] = hasId;",
							"tests[\"All customers have name\"] = hasName;",
							"tests[\"All customers have registered_at\"] = hasRegisteredAt;",
							"tests[\"All customers have postal_code\"] = hasPostalCode;",
							"tests[\"All customers have phone\"] = hasPhone;",
							"tests[\"All customers have movies_checked_out_count\"] = hasMoviesCheckedOutCount;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/customers",
					"host": [
						"{{url}}"
					],
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Check data format",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Data is an array\"] = Array.isArray(jsonData);",
							"tests[\"Many movies were sent\"] = jsonData.length > 0;",
							"",
							"// Save info on the first movie",
							"postman.setEnvironmentVariable(\"movie_id\", jsonData[0].id);",
							"",
							"// Check required fields",
							"var hasTitle = true;",
							"var hasReleaseDate = true;",
							"",
							"jsonData.forEach(function(customer) {",
							"  hasTitle = hasTitle && \"title\" in customer;",
							"  hasReleaseDate = hasReleaseDate && \"release_date\" in customer;",
							"});",
							"",
							"tests[\"All movies have title\"] = hasTitle;",
							"tests[\"All movies have release_date\"] = hasReleaseDate;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/movies",
					"host": [
						"{{url}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67d129fd-ed85-4786-8b1b-650f18893dcb",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Check data format",
							"var movie = JSON.parse(responseBody);",
							"tests[\"Data is not an array\"] = !Array.isArray(movie);",
							"",
							"// Check required fields",
							"tests[\"Movie has title\"] = \"title\" in movie;",
							"tests[\"Movie has overview\"] = \"overview\" in movie;",
							"tests[\"Movie has release_date\"] = \"release_date\" in movie;",
							"tests[\"Movie has inventory\"] = \"inventory\" in movie;",
							"tests[\"Movie has available_inventory\"] = \"inventory_available\" in movie;",
							"",
							"// Save available inventory for later",
							"postman.setEnvironmentVariable(\"movie_ai\", movie.inventory_available);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/movies/{{movie_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"movies",
						"{{movie_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Out Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f58b2427-e72e-4c76-a830-f714e65942be",
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "decbbae7-c4e7-40ad-852d-e682814daac8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"movie_id\": {{movie_id}},\n\t\"customer_id\": {{customer_id}}\n}"
				},
				"url": {
					"raw": "{{url}}/rentals/check-out",
					"host": [
						"{{url}}"
					],
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Check Out Count Increased",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Extract the customer we're interested in",
							"var customerList = JSON.parse(responseBody);",
							"tests[\"Data is an array\"] = Array.isArray(customerList);",
							"",
							"var customerId = postman.getEnvironmentVariable(\"customer_id\");",
							"customerList = customerList.filter(function(c) { return c.id == customerId });",
							"",
							"tests[\"Sent back expected customer\"] = customerList.length == 1;",
							"",
							"// Check that the mcoc has increased",
							"var expected = Number(postman.getEnvironmentVariable(\"customer_mcoc\")) + 1;",
							"tests[\"Customer's movie check out count increased\"] = customerList[0].movies_checked_out_count === expected;",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/customers",
					"host": [
						"{{url}}"
					],
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Movie Available Inventory Decreased",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df7072ff-1b21-4baf-93fb-63047430d01d",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Check data format",
							"var movie = JSON.parse(responseBody);",
							"tests[\"Data is not an array\"] = !Array.isArray(movie);",
							"",
							"var expected = Number(postman.getEnvironmentVariable(\"movie_ai\")) - 1;",
							"tests[\"Movie inventory_available decreased\"] = movie.inventory_available === expected;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/movies/{{movie_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"movies",
						"{{movie_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check In Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var today = new Date();",
							"",
							"// Get 1 week from today. Works at the end of the month too.",
							"var nextWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7);",
							"",
							"// toDateString produces \"Wed Jul 28 1993\", which fortunately Rails is able to parse",
							"postman.setEnvironmentVariable(\"future_due_date\", nextWeek.toDateString());"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"customer_id\": {{customer_id}},\n\t\"movie_id\": {{movie_id}}\n}"
				},
				"url": {
					"raw": "{{url}}/rentals/check-in",
					"host": [
						"{{url}}"
					],
					"path": [
						"rentals",
						"check-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Check Out Count Decreased",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Extract the customer we're interested in",
							"var customerList = JSON.parse(responseBody);",
							"tests[\"Data is an array\"] = Array.isArray(customerList);",
							"",
							"var customerId = postman.getEnvironmentVariable(\"customer_id\");",
							"customerList = customerList.filter(function(c) { return c.id == customerId });",
							"",
							"tests[\"Sent back expected customer\"] = customerList.length == 1;",
							"",
							"// Check that the mcoc has decreased",
							"var expected = Number(postman.getEnvironmentVariable(\"customer_mcoc\"));",
							"tests[\"Customer's movie check out count decreased\"] = customerList[0].movies_checked_out_count === expected;",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/customers",
					"host": [
						"{{url}}"
					],
					"path": [
						"customers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Movie Available Inventory Increased",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26502d5c-bc4f-4358-bb1b-256e26830427",
						"exec": [
							"// Check headers",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentType = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is present\"] = contentType;",
							"tests[\"Content-Type is application/json\"] = contentType.has('application/json');",
							"",
							"// Check data format",
							"var movie = JSON.parse(responseBody);",
							"tests[\"Data is not an array\"] = !Array.isArray(movie);",
							"",
							"var expected = Number(postman.getEnvironmentVariable(\"movie_ai\"));",
							"tests[\"Movie inventory_available increased\"] = movie.inventory_available === expected;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/movies/{{movie_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"movies",
						"{{movie_id}}"
					]
				}
			},
			"response": []
		}
	]
}